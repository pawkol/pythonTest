pipeline {
    agent any

    environment {
        WORKSPACE_DIR = "${env.WORKSPACE}/dependency-check-report"
    }

    stages {
        
        stage('Dependency Check') {
            steps {
                // Uruchamianie Dependency-Check z generowaniem raportów JSON i HTML w wybranym katalogu
                sh """
                dependency-check.sh \
                    --format JSON \
                    --format HTML \
                    --out ${WORKSPACE_DIR}
                """
            }
        }

        stage('SonarQube Analysis') {
            environment {
                // Konfiguracja SonarQube
                SONAR_HOST_URL = 'http://sonarqube:9000'
            }
            steps {
                withSonarQubeEnv('SonarQube') {
                    // Uruchamianie analizy SonarQube z odpowiednimi ścieżkami do raportów Dependency-Check
                    sh """
                    sonar-scanner \
                        -Dsonar.projectKey=python_project \
                        -Dsonar.sources=. \
                        -Dsonar.dependencyCheck.htmlReportPath=${WORKSPACE_DIR}/dependency-check-report.html \
                        -Dsonar.dependencyCheck.jsonReportPath=${WORKSPACE_DIR}/dependency-check-report.json
                    """
                }
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: 'dependency-check-report/*.html, dependency-check-report/*.json', allowEmptyArchive: true
            echo 'Build completed with warnings.'
        }

        success {
            echo 'Build and SonarQube analysis completed successfully!'
        }

        unstable {
            echo 'Build completed with warnings. Check Dependency-Check or SonarQube for issues.'
        }

        failure {
            echo 'Build failed. Please review the logs for details.'
        }
    }
}
