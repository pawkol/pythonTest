pipeline {
    agent { label 'linux' }
    options {
        buildDiscarder(logRotator(numToKeepStr: '5'))
    }
    stages {
        stage('Dependency Check') {
            steps {
                script {
                    // Użycie Dependency-Check
                    def dependencyCheckHome = tool 'DependencyCheck'
                    echo "Dependency-Check installation directory: ${dependencyCheckHome}"

                    // Uruchomienie Dependency-Check
                    def scanResult = sh(script: "${dependencyCheckHome}/bin/dependency-check.sh --project python_project --scan . --out ./dependency-check-report", returnStatus: true)
                    
                    // Sprawdzenie statusu skanowania
                    if (scanResult != 0) {
                        error "Dependency-Check failed with status ${scanResult}. Check the logs for more details."
                    }

                    // Publikacja wyników Dependency-Check w Jenkins
                    dependencyCheckPublisher pattern: '**/dependency-check-report/dependency-check-report.xml'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    // Użycie SonarQube Scanner
                    def scannerHome = tool 'SonarQubeScanner'
                    echo "SonarQube Scanner installation directory: ${scannerHome}"

                    withSonarQubeEnv('sq1') {
                        def sonarResult = sh(script: "${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=python_project -Dsonar.sources=. -Dsonar.language=py -Dsonar.sourceEncoding=UTF-8", returnStatus: true)
                        
                        // Sprawdzenie statusu analizy SonarQube
                        if (sonarResult != 0) {
                            error "SonarQube analysis failed with status ${sonarResult}. Check the logs for more details."
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            // Publikowanie wyników Dependency-Check w Jenkins
            dependencyCheckPublisher pattern: '**/dependency-check-report/dependency-check-report.xml'
        }
        success {
            echo "Build completed successfully."
        }
        unstable {
            echo "Build completed with warnings."
        }
        failure {
            echo "Build failed."
        }
    }
}
